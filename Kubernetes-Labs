Kubernetes Essentials - 

Lab 1: Kubernetes Operations on AWS
Task 1: Setting up a Kubernetes Cluster
see PDF document 

Task 2: 
Task: Create pod using kubectl command

kubectl run testpod --image=nginx:latest
#list pods
kubectl get pods

#ssh/login to that pod

kubectl exec -it mypod -- bash 
#to comeout of pod run exit command.
exit
# to Read pod's log
kubectl logs mypod
#Describe pod to see it's configuration
kubectl describe pod mypod

Pod Lifecycle
•	Pending: Pod is registered in Kubernetes, but the container images are being created.
•	Running: Pod has been defined on a node, all containers are created, and at least one of them is running.
•	Succeeded: Containers in the pod have finished their task and have terminated successfully.
•	Failed: At least one container in the Pod has failed, and all the containers have terminated.
•	Unknown: Status of the Pod cannot be determined due to an error in communication.


Task 2.1 Create pod using yaml file 

vi pod.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: myapp
  name: multi-con-pod
spec:
  containers:
  - name: con1   ### first container 
    image: nginx:latest
    ports:
    - containerPort: 80

kubectl apply -f pod.yaml
kubectl get pod


Task 3:
# multiple container in pods 

vi multi-container.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: myapp
  name: multi-con-pod
spec:
  containers:
  - name: con1   ### first container 
    image: nginx:latest
    ports:
    - containerPort: 80
  - name: con2    ## second container 
    image: tomcat
    ports:
    - containerPort: 8080

# to save file :wq

create pod by using below command 
kubectl create -f multi-container.yaml

a. read logs of specific contaienr
 kubectl logs {pod-name} -c {container-name}
 kubectl logs multi-con-pod -c con2

b. login into specific container
kubectl exec -it {pod-name} -c {container-name} -- bash
kubectl exec -it multi-con-pod -c con1 -- bash

to out of container run exit command 


Lab 2: Services in Kubernetes


Task 1: Create a Pod using a YAML file

kubectl get nodes
kubectl get nodes -o wide

vi httpd-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  name: httpd-pod
  labels:
    app: myapp
spec:
  containers:
  - name: httpd-container
    image: httpd
    ports:
      - containerPort: 80

# to save file use :wq!


kubectl create -f httpd-pod.yaml
kubectl get pods
kubectl get pods -o wide
kubectl get pod httpd-pod -o yaml
kubectl describe pod httpd-pod 
kubectl get pods --show-labels

Task 2: Setup ClusterIP service

vi httpd-svc.yaml

apiVersion: v1
kind: Service
metadata:
  name: httpd-svc
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

# to save :wq

kubectl apply -f httpd-svc.yaml
kubectl get services
kubectl describe svc httpd-svc
kubectl get ep 
kubectl get svc httpd-svc

Create a pod and login to that pod to execute curl command 

kubectl run testpod --image=httpd:latest --port 80
kubectl exec -it testpod -- bash
apt update && apt install curl -y
curl http://httpd-svc

Task 3: Setup NodePort service

vi httpd-svc.yaml

# Replace the content of httpd-svc.yaml with below content use ESc and :wq! to quit vi

apiVersion: v1
kind: Service
metadata:
  name: httpd-svc
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
  type: NodePort

# End of file

kubectl apply -f httpd-svc.yaml

kubectl get svc 
kubectl describe svc httpd-svc
kubectl get nodes -owide | grep node | awk '{print $7}'
curl http://<Your NODE_EXTERNAL_IP>:<Your NodePort>


Task 4: Setup LoadBalancer service

vi httpd-svc.yaml

# Replace the content of httpd-svc.yaml with below content use ESc and :wq! to quit vi

apiVersion: v1
kind: Service
metadata:
  name: httpd-svc
spec:
  selector:
    app: myapp
  ports:
  - protocol: TCP
    port: 80
  type: LoadBalancer


# End of file

kubectl apply -f httpd-svc.yaml
kubectl describe svc httpd-svc
curl http://<Your LoadBalancer_Ingress>:<Your Service_Port>

Task 5: Delete and recreate httpd Pod

kubectl get pod httpd-pod -o wide
kubectl describe svc httpd-svc
kubectl delete pod httpd-pod
kubectl describe svc httpd-svc
kubectl create -f httpd-pod.yaml
kubectl get pod httpd-pod -o wide
kubectl describe svc httpd-svc

Task 5.1: Clean-up

kubectl delete -f httpd-pod.yaml
kubectl delete -f httpd-svc.yaml

TaskL 6 Container resource limits:

vi myres-pod.yaml

apiVersion: v1
kind: Pod
metadata:
  labels:
    app: myapp
  name: myres-pod
spec:
  containers:
  - name: con1   ### first container
    image: nginx:latest
    ports:
    - containerPort: 80
    resources:
       requests:
         memory: "64Mi"
         cpu: "100m"
       limits:
         memory: "128Mi"
         cpu: "500m"
  - name: con2
    image: tomcat:latest
    ports:
    - containerPort: 8080
    resources:
       requests:
         memory: "64Mi"
         cpu: "100m"
       limits:
         memory: "128Mi"
         cpu: "500m"

kubectl create -f myres-pod.yaml
kubectl get pods
kubectl describe pod myres-pod


Task: 7 ReplicationController 

vi myrc.yaml

apiVersion: v1
kind: ReplicationController
metadata:
   name: myrc
spec:
   replicas: 3
   selector:
     app: myapp
   template:
     metadata:
       labels:
          app: myapp
     spec:
        containers:
        - name: con1
          image: nginx:latest
          ports:
          - containerPort: 80


kubectl create -f myrc.yaml
kubectl get rc
kubectl get pods


Task: 8 ReplicaSet

vi myrs.yaml

apiVersion: apps/v1
kind: ReplicaSet
metadata:
   name: my-rplicaset
spec:
   replicas: 3
   selector:
     matchExpressions:
      - key: app
        operator: In
        values: [myapp]
      - key: env
        operator: NotIn
        values: [dev]
   template:
     metadata:
       labels:
          app: myapp
     spec:
        containers:
        - name: con1
          image: nginx:latest
          ports:
          - containerPort: 80



kubectl create -f myrs.yaml
kubectl get rs
kubectl get pods

kubectl scale rs my-rplicaset --replicas=5



******************
Lab 3: Deployment*
******************
Task 1: Write a Deployment YAML and Apply it

wget https://hpe-content.s3.ap-south-1.amazonaws.com/dep-nginx.yaml
kubectl apply -f dep-nginx.yaml
kubectl get deployments
kubectl get rs
kubectl get pods

kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

Task 2: Update the Deployment with a newer image

kubectl set image deployment/nginx-dep nginx-ctr=nginx:1.11 --record
kubectl describe deployments
kubectl get pods

kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

Task 3: Rollback of Deployment 

kubectl rollout history deployment/nginx-dep
kubectl rollout history deployment nginx-dep --revision 1   #describe history
kubectl rollout undo deployment/nginx-dep --to-revision=1
kubectl get pods

kubectl exec -it <replace pod_name> -- /bin/bash
nginx -v
exit

Task 4: Scaling of Deployments

kubectl get deployments
kubectl get pods

kubectl scale deployment nginx-dep --replicas=8
kubectl get deployments
kubectl get pods

kubectl scale deployment nginx-dep --replicas=2
kubectl get deployments
kubectl get pods


Task 5: Deployment Auto Scaling HPA - Horizontal Pod Autoscaling

kubectl autoscale deployment nginx-dep --min=3 --max=8 --cpu-percent=70
kubectl get hpa

Lab 4: DaemonSet in Kubernetes

wget https://hpe-content.s3.ap-south-1.amazonaws.com/ds-pod.yaml

kubectl apply -f ds-pod.yaml
kubectl get ds fluent-ds
kubectl get pods -o wide
kubectl delete -f ds-pod.yaml



************
Lab 5:  Volumes 


EmptyDir , hostPath , persistant volume

Task: 1 Empty Dir Volume

vi emp-vol-dep.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: emp-vol-dep
spec:
  replicas: 2
  selector:
    matchLabels:
      app: emp-app
  template:
    metadata:
      labels:
        app: emp-app
    spec:
      containers:
      - name: con1
        image: nginx:latest
        ports:
        - containerPort: 80
        volumeMounts:
        - name: myvol
          mountPath: /data
      - name: con2
        image: tomcat:latest
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: myvol
          mountPath: /data
      volumes:
      - name: myvol
        emptyDir: {}

# save file  Press ESc and :wq! to save and exit vi
kubectl create -f emp-vol-dep.yaml
kubectl get deployment


kubectl exec -it <pod-name> -c con1 -- bash
cd /data
create a  file
touch mango.txt
exit

now login to second container and check you mango file

kubectl exec -it <pod-name> -c con1 -- bash
cd /data
ls


Task: 2 hostPath volume

vi hostpath-vol.yaml

apiVersion: v1
kind: Pod
metadata:
  name: hostvol-pod
spec:
  containers:
  - name: ng
    image: nginx:latest
    ports:
    - containerPort: 80
    volumeMounts:
    - name: empvol
      mountPath: /data
  - name: tom
    image: tomcat:latest
    ports:
    - containerPort: 8080
    volumeMounts:
    - name: empvol
      mountPath: /data
  volumes:
  - name: empvol
    hostPath:
      path: /data 

kubectl apply -f hostpath-vol.yaml

Task 2.1 Login to 1st  container and create following files
kubectl exec -it hostvol-pod -c ng -- bash

cd /data/
touch file1.txt file2.txt file3.txt
ls
file1.txt  file2.txt  file3.txt
exit

Now loginto second container and verify data is accessible here also in second container.

kubectl exec -it hostvol-pod -c tom -- bash
cd /data/
ls
file1.txt  file2.txt  file3.txt
exit


Task 2.2: login into worker node where pod is deployed and check data directory created by hostPath

Ssh into worker node
Ssh ubuntu@<nodes public IP here>
Goto to path created by hostpath (/data/) and your data is here even after pod deletion.
cd /data/
/data$ ls
file1.txt  file2.txt  file3.txt
exit


: Persistent Volume in Kubernetes using storage-class
Task 3: create pvc persistant volume claim

vi pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  volumeMode: Filesystem
  resources:
    requests:
      storage: 2Gi

# save file  Press ESc and :wq! to save and exit vi
kubectl create -f pvc.yaml
kubectl get pvc

Task 2: Create nginx Pod with persistent volume claim 

vi pvc-pod.yaml

kind: Pod
apiVersion: v1
metadata:
  name: pv-pod
spec:
  volumes:
    - name: pv-storage
      persistentVolumeClaim:
       claimName: pv-claim
  containers:
    - name: pv-container
      image: nginx
      ports:
        - containerPort: 80
          name: "http-server"
      volumeMounts:
        - mountPath: "/usr/share/nginx/html"
          name: pv-storage



# Press ESc and :wq! to save and exit vi

kubectl apply -f pvc-pod.yaml
kubectl get pvc
kubectl exec -it pv-container -- bash
cd /usr/share/nginx/html
create a  file 
touch mango.txt
exit

delete pod 
kubectl delete -f pvc-pod.yaml
re-create pod again
kubectl create -f pvc-pod.yaml
check your mango.txt file is already there
kubectl exec -it pv-container -- bash
cd /mnt
ls
